// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kapt/kapt/gql/ent/categorymodel"
	"kapt/kapt/gql/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CategoryModelUpdate is the builder for updating CategoryModel entities.
type CategoryModelUpdate struct {
	config
	hooks    []Hook
	mutation *CategoryModelMutation
}

// Where appends a list predicates to the CategoryModelUpdate builder.
func (cmu *CategoryModelUpdate) Where(ps ...predicate.CategoryModel) *CategoryModelUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetName sets the "name" field.
func (cmu *CategoryModelUpdate) SetName(s string) *CategoryModelUpdate {
	cmu.mutation.SetName(s)
	return cmu
}

// SetTenantID sets the "tenant_id" field.
func (cmu *CategoryModelUpdate) SetTenantID(u uuid.UUID) *CategoryModelUpdate {
	cmu.mutation.SetTenantID(u)
	return cmu
}

// Mutation returns the CategoryModelMutation object of the builder.
func (cmu *CategoryModelUpdate) Mutation() *CategoryModelMutation {
	return cmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *CategoryModelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cmu.sqlSave, cmu.mutation, cmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *CategoryModelUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *CategoryModelUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *CategoryModelUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmu *CategoryModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(categorymodel.Table, categorymodel.Columns, sqlgraph.NewFieldSpec(categorymodel.FieldID, field.TypeUUID))
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.Name(); ok {
		_spec.SetField(categorymodel.FieldName, field.TypeString, value)
	}
	if value, ok := cmu.mutation.TenantID(); ok {
		_spec.SetField(categorymodel.FieldTenantID, field.TypeUUID, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categorymodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmu.mutation.done = true
	return n, nil
}

// CategoryModelUpdateOne is the builder for updating a single CategoryModel entity.
type CategoryModelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CategoryModelMutation
}

// SetName sets the "name" field.
func (cmuo *CategoryModelUpdateOne) SetName(s string) *CategoryModelUpdateOne {
	cmuo.mutation.SetName(s)
	return cmuo
}

// SetTenantID sets the "tenant_id" field.
func (cmuo *CategoryModelUpdateOne) SetTenantID(u uuid.UUID) *CategoryModelUpdateOne {
	cmuo.mutation.SetTenantID(u)
	return cmuo
}

// Mutation returns the CategoryModelMutation object of the builder.
func (cmuo *CategoryModelUpdateOne) Mutation() *CategoryModelMutation {
	return cmuo.mutation
}

// Where appends a list predicates to the CategoryModelUpdate builder.
func (cmuo *CategoryModelUpdateOne) Where(ps ...predicate.CategoryModel) *CategoryModelUpdateOne {
	cmuo.mutation.Where(ps...)
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *CategoryModelUpdateOne) Select(field string, fields ...string) *CategoryModelUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated CategoryModel entity.
func (cmuo *CategoryModelUpdateOne) Save(ctx context.Context) (*CategoryModel, error) {
	return withHooks(ctx, cmuo.sqlSave, cmuo.mutation, cmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *CategoryModelUpdateOne) SaveX(ctx context.Context) *CategoryModel {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *CategoryModelUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *CategoryModelUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmuo *CategoryModelUpdateOne) sqlSave(ctx context.Context) (_node *CategoryModel, err error) {
	_spec := sqlgraph.NewUpdateSpec(categorymodel.Table, categorymodel.Columns, sqlgraph.NewFieldSpec(categorymodel.FieldID, field.TypeUUID))
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CategoryModel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, categorymodel.FieldID)
		for _, f := range fields {
			if !categorymodel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != categorymodel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.Name(); ok {
		_spec.SetField(categorymodel.FieldName, field.TypeString, value)
	}
	if value, ok := cmuo.mutation.TenantID(); ok {
		_spec.SetField(categorymodel.FieldTenantID, field.TypeUUID, value)
	}
	_node = &CategoryModel{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categorymodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmuo.mutation.done = true
	return _node, nil
}
