// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kapt/kapt/gql/ent/usermodel"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserModelCreate is the builder for creating a UserModel entity.
type UserModelCreate struct {
	config
	mutation *UserModelMutation
	hooks    []Hook
}

// SetUserName sets the "user_name" field.
func (umc *UserModelCreate) SetUserName(s string) *UserModelCreate {
	umc.mutation.SetUserName(s)
	return umc
}

// SetPswd sets the "pswd" field.
func (umc *UserModelCreate) SetPswd(s string) *UserModelCreate {
	umc.mutation.SetPswd(s)
	return umc
}

// SetTenantID sets the "tenant_id" field.
func (umc *UserModelCreate) SetTenantID(u uuid.UUID) *UserModelCreate {
	umc.mutation.SetTenantID(u)
	return umc
}

// SetRole sets the "role" field.
func (umc *UserModelCreate) SetRole(s string) *UserModelCreate {
	umc.mutation.SetRole(s)
	return umc
}

// SetID sets the "id" field.
func (umc *UserModelCreate) SetID(u uuid.UUID) *UserModelCreate {
	umc.mutation.SetID(u)
	return umc
}

// Mutation returns the UserModelMutation object of the builder.
func (umc *UserModelCreate) Mutation() *UserModelMutation {
	return umc.mutation
}

// Save creates the UserModel in the database.
func (umc *UserModelCreate) Save(ctx context.Context) (*UserModel, error) {
	return withHooks(ctx, umc.sqlSave, umc.mutation, umc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (umc *UserModelCreate) SaveX(ctx context.Context) *UserModel {
	v, err := umc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umc *UserModelCreate) Exec(ctx context.Context) error {
	_, err := umc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umc *UserModelCreate) ExecX(ctx context.Context) {
	if err := umc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umc *UserModelCreate) check() error {
	if _, ok := umc.mutation.UserName(); !ok {
		return &ValidationError{Name: "user_name", err: errors.New(`ent: missing required field "UserModel.user_name"`)}
	}
	if _, ok := umc.mutation.Pswd(); !ok {
		return &ValidationError{Name: "pswd", err: errors.New(`ent: missing required field "UserModel.pswd"`)}
	}
	if _, ok := umc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "UserModel.tenant_id"`)}
	}
	if _, ok := umc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "UserModel.role"`)}
	}
	return nil
}

func (umc *UserModelCreate) sqlSave(ctx context.Context) (*UserModel, error) {
	if err := umc.check(); err != nil {
		return nil, err
	}
	_node, _spec := umc.createSpec()
	if err := sqlgraph.CreateNode(ctx, umc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	umc.mutation.id = &_node.ID
	umc.mutation.done = true
	return _node, nil
}

func (umc *UserModelCreate) createSpec() (*UserModel, *sqlgraph.CreateSpec) {
	var (
		_node = &UserModel{config: umc.config}
		_spec = sqlgraph.NewCreateSpec(usermodel.Table, sqlgraph.NewFieldSpec(usermodel.FieldID, field.TypeUUID))
	)
	if id, ok := umc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := umc.mutation.UserName(); ok {
		_spec.SetField(usermodel.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := umc.mutation.Pswd(); ok {
		_spec.SetField(usermodel.FieldPswd, field.TypeString, value)
		_node.Pswd = value
	}
	if value, ok := umc.mutation.TenantID(); ok {
		_spec.SetField(usermodel.FieldTenantID, field.TypeUUID, value)
		_node.TenantID = value
	}
	if value, ok := umc.mutation.Role(); ok {
		_spec.SetField(usermodel.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	return _node, _spec
}

// UserModelCreateBulk is the builder for creating many UserModel entities in bulk.
type UserModelCreateBulk struct {
	config
	builders []*UserModelCreate
}

// Save creates the UserModel entities in the database.
func (umcb *UserModelCreateBulk) Save(ctx context.Context) ([]*UserModel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(umcb.builders))
	nodes := make([]*UserModel, len(umcb.builders))
	mutators := make([]Mutator, len(umcb.builders))
	for i := range umcb.builders {
		func(i int, root context.Context) {
			builder := umcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserModelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, umcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, umcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, umcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (umcb *UserModelCreateBulk) SaveX(ctx context.Context) []*UserModel {
	v, err := umcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umcb *UserModelCreateBulk) Exec(ctx context.Context) error {
	_, err := umcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umcb *UserModelCreateBulk) ExecX(ctx context.Context) {
	if err := umcb.Exec(ctx); err != nil {
		panic(err)
	}
}
