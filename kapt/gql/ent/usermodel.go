// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kapt/kapt/gql/ent/usermodel"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// UserModel is the model entity for the UserModel schema.
type UserModel struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserName holds the value of the "user_name" field.
	UserName string `json:"user_name,omitempty"`
	// Pswd holds the value of the "pswd" field.
	Pswd string `json:"pswd,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID uuid.UUID `json:"tenant_id,omitempty"`
	// Role holds the value of the "role" field.
	Role         string `json:"role,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserModel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usermodel.FieldUserName, usermodel.FieldPswd, usermodel.FieldRole:
			values[i] = new(sql.NullString)
		case usermodel.FieldID, usermodel.FieldTenantID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserModel fields.
func (um *UserModel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usermodel.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				um.ID = *value
			}
		case usermodel.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				um.UserName = value.String
			}
		case usermodel.FieldPswd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pswd", values[i])
			} else if value.Valid {
				um.Pswd = value.String
			}
		case usermodel.FieldTenantID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				um.TenantID = *value
			}
		case usermodel.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				um.Role = value.String
			}
		default:
			um.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserModel.
// This includes values selected through modifiers, order, etc.
func (um *UserModel) Value(name string) (ent.Value, error) {
	return um.selectValues.Get(name)
}

// Update returns a builder for updating this UserModel.
// Note that you need to call UserModel.Unwrap() before calling this method if this UserModel
// was returned from a transaction, and the transaction was committed or rolled back.
func (um *UserModel) Update() *UserModelUpdateOne {
	return NewUserModelClient(um.config).UpdateOne(um)
}

// Unwrap unwraps the UserModel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (um *UserModel) Unwrap() *UserModel {
	_tx, ok := um.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserModel is not a transactional entity")
	}
	um.config.driver = _tx.drv
	return um
}

// String implements the fmt.Stringer.
func (um *UserModel) String() string {
	var builder strings.Builder
	builder.WriteString("UserModel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", um.ID))
	builder.WriteString("user_name=")
	builder.WriteString(um.UserName)
	builder.WriteString(", ")
	builder.WriteString("pswd=")
	builder.WriteString(um.Pswd)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", um.TenantID))
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(um.Role)
	builder.WriteByte(')')
	return builder.String()
}

// UserModels is a parsable slice of UserModel.
type UserModels []*UserModel
