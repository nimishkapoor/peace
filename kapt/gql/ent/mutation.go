// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kapt/kapt/gql/ent/attachmentmodel"
	"kapt/kapt/gql/ent/categorymodel"
	"kapt/kapt/gql/ent/predicate"
	"kapt/kapt/gql/ent/tenantmodel"
	"kapt/kapt/gql/ent/threadmodel"
	"kapt/kapt/gql/ent/ticketmodel"
	"kapt/kapt/gql/ent/usermodel"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAttachmentModel = "AttachmentModel"
	TypeCategoryModel   = "CategoryModel"
	TypeTenantModel     = "TenantModel"
	TypeThreadModel     = "ThreadModel"
	TypeTicketModel     = "TicketModel"
	TypeUserModel       = "UserModel"
)

// AttachmentModelMutation represents an operation that mutates the AttachmentModel nodes in the graph.
type AttachmentModelMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	link          *string
	ticket_id     *uuid.UUID
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AttachmentModel, error)
	predicates    []predicate.AttachmentModel
}

var _ ent.Mutation = (*AttachmentModelMutation)(nil)

// attachmentmodelOption allows management of the mutation configuration using functional options.
type attachmentmodelOption func(*AttachmentModelMutation)

// newAttachmentModelMutation creates new mutation for the AttachmentModel entity.
func newAttachmentModelMutation(c config, op Op, opts ...attachmentmodelOption) *AttachmentModelMutation {
	m := &AttachmentModelMutation{
		config:        c,
		op:            op,
		typ:           TypeAttachmentModel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttachmentModelID sets the ID field of the mutation.
func withAttachmentModelID(id uuid.UUID) attachmentmodelOption {
	return func(m *AttachmentModelMutation) {
		var (
			err   error
			once  sync.Once
			value *AttachmentModel
		)
		m.oldValue = func(ctx context.Context) (*AttachmentModel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AttachmentModel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttachmentModel sets the old AttachmentModel of the mutation.
func withAttachmentModel(node *AttachmentModel) attachmentmodelOption {
	return func(m *AttachmentModelMutation) {
		m.oldValue = func(context.Context) (*AttachmentModel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttachmentModelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttachmentModelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AttachmentModel entities.
func (m *AttachmentModelMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttachmentModelMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttachmentModelMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AttachmentModel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLink sets the "link" field.
func (m *AttachmentModelMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *AttachmentModelMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the AttachmentModel entity.
// If the AttachmentModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentModelMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *AttachmentModelMutation) ResetLink() {
	m.link = nil
}

// SetTicketID sets the "ticket_id" field.
func (m *AttachmentModelMutation) SetTicketID(u uuid.UUID) {
	m.ticket_id = &u
}

// TicketID returns the value of the "ticket_id" field in the mutation.
func (m *AttachmentModelMutation) TicketID() (r uuid.UUID, exists bool) {
	v := m.ticket_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTicketID returns the old "ticket_id" field's value of the AttachmentModel entity.
// If the AttachmentModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentModelMutation) OldTicketID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTicketID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTicketID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTicketID: %w", err)
	}
	return oldValue.TicketID, nil
}

// ResetTicketID resets all changes to the "ticket_id" field.
func (m *AttachmentModelMutation) ResetTicketID() {
	m.ticket_id = nil
}

// Where appends a list predicates to the AttachmentModelMutation builder.
func (m *AttachmentModelMutation) Where(ps ...predicate.AttachmentModel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttachmentModelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttachmentModelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AttachmentModel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttachmentModelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttachmentModelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AttachmentModel).
func (m *AttachmentModelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttachmentModelMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.link != nil {
		fields = append(fields, attachmentmodel.FieldLink)
	}
	if m.ticket_id != nil {
		fields = append(fields, attachmentmodel.FieldTicketID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttachmentModelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attachmentmodel.FieldLink:
		return m.Link()
	case attachmentmodel.FieldTicketID:
		return m.TicketID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttachmentModelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attachmentmodel.FieldLink:
		return m.OldLink(ctx)
	case attachmentmodel.FieldTicketID:
		return m.OldTicketID(ctx)
	}
	return nil, fmt.Errorf("unknown AttachmentModel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttachmentModelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attachmentmodel.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case attachmentmodel.FieldTicketID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTicketID(v)
		return nil
	}
	return fmt.Errorf("unknown AttachmentModel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttachmentModelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttachmentModelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttachmentModelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AttachmentModel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttachmentModelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttachmentModelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttachmentModelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AttachmentModel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttachmentModelMutation) ResetField(name string) error {
	switch name {
	case attachmentmodel.FieldLink:
		m.ResetLink()
		return nil
	case attachmentmodel.FieldTicketID:
		m.ResetTicketID()
		return nil
	}
	return fmt.Errorf("unknown AttachmentModel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttachmentModelMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttachmentModelMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttachmentModelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttachmentModelMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttachmentModelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttachmentModelMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttachmentModelMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AttachmentModel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttachmentModelMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AttachmentModel edge %s", name)
}

// CategoryModelMutation represents an operation that mutates the CategoryModel nodes in the graph.
type CategoryModelMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	tenant_id     *uuid.UUID
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CategoryModel, error)
	predicates    []predicate.CategoryModel
}

var _ ent.Mutation = (*CategoryModelMutation)(nil)

// categorymodelOption allows management of the mutation configuration using functional options.
type categorymodelOption func(*CategoryModelMutation)

// newCategoryModelMutation creates new mutation for the CategoryModel entity.
func newCategoryModelMutation(c config, op Op, opts ...categorymodelOption) *CategoryModelMutation {
	m := &CategoryModelMutation{
		config:        c,
		op:            op,
		typ:           TypeCategoryModel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryModelID sets the ID field of the mutation.
func withCategoryModelID(id uuid.UUID) categorymodelOption {
	return func(m *CategoryModelMutation) {
		var (
			err   error
			once  sync.Once
			value *CategoryModel
		)
		m.oldValue = func(ctx context.Context) (*CategoryModel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CategoryModel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategoryModel sets the old CategoryModel of the mutation.
func withCategoryModel(node *CategoryModel) categorymodelOption {
	return func(m *CategoryModelMutation) {
		m.oldValue = func(context.Context) (*CategoryModel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryModelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryModelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CategoryModel entities.
func (m *CategoryModelMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoryModelMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategoryModelMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CategoryModel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CategoryModelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CategoryModelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CategoryModel entity.
// If the CategoryModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryModelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CategoryModelMutation) ResetName() {
	m.name = nil
}

// SetTenantID sets the "tenant_id" field.
func (m *CategoryModelMutation) SetTenantID(u uuid.UUID) {
	m.tenant_id = &u
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *CategoryModelMutation) TenantID() (r uuid.UUID, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the CategoryModel entity.
// If the CategoryModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryModelMutation) OldTenantID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *CategoryModelMutation) ResetTenantID() {
	m.tenant_id = nil
}

// Where appends a list predicates to the CategoryModelMutation builder.
func (m *CategoryModelMutation) Where(ps ...predicate.CategoryModel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CategoryModelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CategoryModelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CategoryModel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CategoryModelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CategoryModelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CategoryModel).
func (m *CategoryModelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryModelMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, categorymodel.FieldName)
	}
	if m.tenant_id != nil {
		fields = append(fields, categorymodel.FieldTenantID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryModelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case categorymodel.FieldName:
		return m.Name()
	case categorymodel.FieldTenantID:
		return m.TenantID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryModelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case categorymodel.FieldName:
		return m.OldName(ctx)
	case categorymodel.FieldTenantID:
		return m.OldTenantID(ctx)
	}
	return nil, fmt.Errorf("unknown CategoryModel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryModelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case categorymodel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case categorymodel.FieldTenantID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	}
	return fmt.Errorf("unknown CategoryModel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryModelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryModelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryModelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CategoryModel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryModelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryModelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryModelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CategoryModel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryModelMutation) ResetField(name string) error {
	switch name {
	case categorymodel.FieldName:
		m.ResetName()
		return nil
	case categorymodel.FieldTenantID:
		m.ResetTenantID()
		return nil
	}
	return fmt.Errorf("unknown CategoryModel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryModelMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryModelMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryModelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryModelMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryModelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryModelMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryModelMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CategoryModel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryModelMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CategoryModel edge %s", name)
}

// TenantModelMutation represents an operation that mutates the TenantModel nodes in the graph.
type TenantModelMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	tenant_name   *string
	status        *int
	addstatus     *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TenantModel, error)
	predicates    []predicate.TenantModel
}

var _ ent.Mutation = (*TenantModelMutation)(nil)

// tenantmodelOption allows management of the mutation configuration using functional options.
type tenantmodelOption func(*TenantModelMutation)

// newTenantModelMutation creates new mutation for the TenantModel entity.
func newTenantModelMutation(c config, op Op, opts ...tenantmodelOption) *TenantModelMutation {
	m := &TenantModelMutation{
		config:        c,
		op:            op,
		typ:           TypeTenantModel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTenantModelID sets the ID field of the mutation.
func withTenantModelID(id uuid.UUID) tenantmodelOption {
	return func(m *TenantModelMutation) {
		var (
			err   error
			once  sync.Once
			value *TenantModel
		)
		m.oldValue = func(ctx context.Context) (*TenantModel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TenantModel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTenantModel sets the old TenantModel of the mutation.
func withTenantModel(node *TenantModel) tenantmodelOption {
	return func(m *TenantModelMutation) {
		m.oldValue = func(context.Context) (*TenantModel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TenantModelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TenantModelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TenantModel entities.
func (m *TenantModelMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TenantModelMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TenantModelMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TenantModel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantName sets the "tenant_name" field.
func (m *TenantModelMutation) SetTenantName(s string) {
	m.tenant_name = &s
}

// TenantName returns the value of the "tenant_name" field in the mutation.
func (m *TenantModelMutation) TenantName() (r string, exists bool) {
	v := m.tenant_name
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantName returns the old "tenant_name" field's value of the TenantModel entity.
// If the TenantModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantModelMutation) OldTenantName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantName: %w", err)
	}
	return oldValue.TenantName, nil
}

// ResetTenantName resets all changes to the "tenant_name" field.
func (m *TenantModelMutation) ResetTenantName() {
	m.tenant_name = nil
}

// SetStatus sets the "status" field.
func (m *TenantModelMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *TenantModelMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the TenantModel entity.
// If the TenantModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantModelMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *TenantModelMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *TenantModelMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *TenantModelMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// Where appends a list predicates to the TenantModelMutation builder.
func (m *TenantModelMutation) Where(ps ...predicate.TenantModel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TenantModelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TenantModelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TenantModel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TenantModelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TenantModelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TenantModel).
func (m *TenantModelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TenantModelMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.tenant_name != nil {
		fields = append(fields, tenantmodel.FieldTenantName)
	}
	if m.status != nil {
		fields = append(fields, tenantmodel.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TenantModelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tenantmodel.FieldTenantName:
		return m.TenantName()
	case tenantmodel.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TenantModelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tenantmodel.FieldTenantName:
		return m.OldTenantName(ctx)
	case tenantmodel.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown TenantModel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TenantModelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tenantmodel.FieldTenantName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantName(v)
		return nil
	case tenantmodel.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown TenantModel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TenantModelMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, tenantmodel.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TenantModelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tenantmodel.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TenantModelMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tenantmodel.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown TenantModel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TenantModelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TenantModelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TenantModelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TenantModel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TenantModelMutation) ResetField(name string) error {
	switch name {
	case tenantmodel.FieldTenantName:
		m.ResetTenantName()
		return nil
	case tenantmodel.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown TenantModel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TenantModelMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TenantModelMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TenantModelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TenantModelMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TenantModelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TenantModelMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TenantModelMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TenantModel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TenantModelMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TenantModel edge %s", name)
}

// ThreadModelMutation represents an operation that mutates the ThreadModel nodes in the graph.
type ThreadModelMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	body          *string
	status        *int
	addstatus     *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ThreadModel, error)
	predicates    []predicate.ThreadModel
}

var _ ent.Mutation = (*ThreadModelMutation)(nil)

// threadmodelOption allows management of the mutation configuration using functional options.
type threadmodelOption func(*ThreadModelMutation)

// newThreadModelMutation creates new mutation for the ThreadModel entity.
func newThreadModelMutation(c config, op Op, opts ...threadmodelOption) *ThreadModelMutation {
	m := &ThreadModelMutation{
		config:        c,
		op:            op,
		typ:           TypeThreadModel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withThreadModelID sets the ID field of the mutation.
func withThreadModelID(id uuid.UUID) threadmodelOption {
	return func(m *ThreadModelMutation) {
		var (
			err   error
			once  sync.Once
			value *ThreadModel
		)
		m.oldValue = func(ctx context.Context) (*ThreadModel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ThreadModel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withThreadModel sets the old ThreadModel of the mutation.
func withThreadModel(node *ThreadModel) threadmodelOption {
	return func(m *ThreadModelMutation) {
		m.oldValue = func(context.Context) (*ThreadModel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ThreadModelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ThreadModelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ThreadModel entities.
func (m *ThreadModelMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ThreadModelMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ThreadModelMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ThreadModel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBody sets the "body" field.
func (m *ThreadModelMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *ThreadModelMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the ThreadModel entity.
// If the ThreadModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThreadModelMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *ThreadModelMutation) ResetBody() {
	m.body = nil
}

// SetStatus sets the "status" field.
func (m *ThreadModelMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ThreadModelMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ThreadModel entity.
// If the ThreadModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThreadModelMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *ThreadModelMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ThreadModelMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *ThreadModelMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// Where appends a list predicates to the ThreadModelMutation builder.
func (m *ThreadModelMutation) Where(ps ...predicate.ThreadModel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ThreadModelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ThreadModelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ThreadModel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ThreadModelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ThreadModelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ThreadModel).
func (m *ThreadModelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ThreadModelMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.body != nil {
		fields = append(fields, threadmodel.FieldBody)
	}
	if m.status != nil {
		fields = append(fields, threadmodel.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ThreadModelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case threadmodel.FieldBody:
		return m.Body()
	case threadmodel.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ThreadModelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case threadmodel.FieldBody:
		return m.OldBody(ctx)
	case threadmodel.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown ThreadModel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ThreadModelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case threadmodel.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case threadmodel.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown ThreadModel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ThreadModelMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, threadmodel.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ThreadModelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case threadmodel.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ThreadModelMutation) AddField(name string, value ent.Value) error {
	switch name {
	case threadmodel.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown ThreadModel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ThreadModelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ThreadModelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ThreadModelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ThreadModel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ThreadModelMutation) ResetField(name string) error {
	switch name {
	case threadmodel.FieldBody:
		m.ResetBody()
		return nil
	case threadmodel.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown ThreadModel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ThreadModelMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ThreadModelMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ThreadModelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ThreadModelMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ThreadModelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ThreadModelMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ThreadModelMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ThreadModel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ThreadModelMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ThreadModel edge %s", name)
}

// TicketModelMutation represents an operation that mutates the TicketModel nodes in the graph.
type TicketModelMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	user_id       *uuid.UUID
	tenant_id     *uuid.UUID
	subject       *string
	body          *string
	category      *uuid.UUID
	label         *string
	assignee_id   *uuid.UUID
	severity      *int
	addseverity   *int
	status        *int
	addstatus     *int
	time          *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TicketModel, error)
	predicates    []predicate.TicketModel
}

var _ ent.Mutation = (*TicketModelMutation)(nil)

// ticketmodelOption allows management of the mutation configuration using functional options.
type ticketmodelOption func(*TicketModelMutation)

// newTicketModelMutation creates new mutation for the TicketModel entity.
func newTicketModelMutation(c config, op Op, opts ...ticketmodelOption) *TicketModelMutation {
	m := &TicketModelMutation{
		config:        c,
		op:            op,
		typ:           TypeTicketModel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTicketModelID sets the ID field of the mutation.
func withTicketModelID(id uuid.UUID) ticketmodelOption {
	return func(m *TicketModelMutation) {
		var (
			err   error
			once  sync.Once
			value *TicketModel
		)
		m.oldValue = func(ctx context.Context) (*TicketModel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TicketModel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTicketModel sets the old TicketModel of the mutation.
func withTicketModel(node *TicketModel) ticketmodelOption {
	return func(m *TicketModelMutation) {
		m.oldValue = func(context.Context) (*TicketModel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TicketModelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TicketModelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TicketModel entities.
func (m *TicketModelMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TicketModelMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TicketModelMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TicketModel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *TicketModelMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *TicketModelMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the TicketModel entity.
// If the TicketModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketModelMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *TicketModelMutation) ResetUserID() {
	m.user_id = nil
}

// SetTenantID sets the "tenant_id" field.
func (m *TicketModelMutation) SetTenantID(u uuid.UUID) {
	m.tenant_id = &u
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *TicketModelMutation) TenantID() (r uuid.UUID, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the TicketModel entity.
// If the TicketModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketModelMutation) OldTenantID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *TicketModelMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetSubject sets the "subject" field.
func (m *TicketModelMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *TicketModelMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the TicketModel entity.
// If the TicketModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketModelMutation) OldSubject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ResetSubject resets all changes to the "subject" field.
func (m *TicketModelMutation) ResetSubject() {
	m.subject = nil
}

// SetBody sets the "body" field.
func (m *TicketModelMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *TicketModelMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the TicketModel entity.
// If the TicketModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketModelMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *TicketModelMutation) ResetBody() {
	m.body = nil
}

// SetCategory sets the "category" field.
func (m *TicketModelMutation) SetCategory(u uuid.UUID) {
	m.category = &u
}

// Category returns the value of the "category" field in the mutation.
func (m *TicketModelMutation) Category() (r uuid.UUID, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the TicketModel entity.
// If the TicketModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketModelMutation) OldCategory(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ResetCategory resets all changes to the "category" field.
func (m *TicketModelMutation) ResetCategory() {
	m.category = nil
}

// SetLabel sets the "label" field.
func (m *TicketModelMutation) SetLabel(s string) {
	m.label = &s
}

// Label returns the value of the "label" field in the mutation.
func (m *TicketModelMutation) Label() (r string, exists bool) {
	v := m.label
	if v == nil {
		return
	}
	return *v, true
}

// OldLabel returns the old "label" field's value of the TicketModel entity.
// If the TicketModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketModelMutation) OldLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabel: %w", err)
	}
	return oldValue.Label, nil
}

// ResetLabel resets all changes to the "label" field.
func (m *TicketModelMutation) ResetLabel() {
	m.label = nil
}

// SetAssigneeID sets the "assignee_id" field.
func (m *TicketModelMutation) SetAssigneeID(u uuid.UUID) {
	m.assignee_id = &u
}

// AssigneeID returns the value of the "assignee_id" field in the mutation.
func (m *TicketModelMutation) AssigneeID() (r uuid.UUID, exists bool) {
	v := m.assignee_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAssigneeID returns the old "assignee_id" field's value of the TicketModel entity.
// If the TicketModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketModelMutation) OldAssigneeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAssigneeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAssigneeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssigneeID: %w", err)
	}
	return oldValue.AssigneeID, nil
}

// ResetAssigneeID resets all changes to the "assignee_id" field.
func (m *TicketModelMutation) ResetAssigneeID() {
	m.assignee_id = nil
}

// SetSeverity sets the "severity" field.
func (m *TicketModelMutation) SetSeverity(i int) {
	m.severity = &i
	m.addseverity = nil
}

// Severity returns the value of the "severity" field in the mutation.
func (m *TicketModelMutation) Severity() (r int, exists bool) {
	v := m.severity
	if v == nil {
		return
	}
	return *v, true
}

// OldSeverity returns the old "severity" field's value of the TicketModel entity.
// If the TicketModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketModelMutation) OldSeverity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSeverity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSeverity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeverity: %w", err)
	}
	return oldValue.Severity, nil
}

// AddSeverity adds i to the "severity" field.
func (m *TicketModelMutation) AddSeverity(i int) {
	if m.addseverity != nil {
		*m.addseverity += i
	} else {
		m.addseverity = &i
	}
}

// AddedSeverity returns the value that was added to the "severity" field in this mutation.
func (m *TicketModelMutation) AddedSeverity() (r int, exists bool) {
	v := m.addseverity
	if v == nil {
		return
	}
	return *v, true
}

// ResetSeverity resets all changes to the "severity" field.
func (m *TicketModelMutation) ResetSeverity() {
	m.severity = nil
	m.addseverity = nil
}

// SetStatus sets the "status" field.
func (m *TicketModelMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *TicketModelMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the TicketModel entity.
// If the TicketModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketModelMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *TicketModelMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *TicketModelMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *TicketModelMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetTime sets the "time" field.
func (m *TicketModelMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *TicketModelMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the TicketModel entity.
// If the TicketModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketModelMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *TicketModelMutation) ResetTime() {
	m.time = nil
}

// Where appends a list predicates to the TicketModelMutation builder.
func (m *TicketModelMutation) Where(ps ...predicate.TicketModel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TicketModelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TicketModelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TicketModel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TicketModelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TicketModelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TicketModel).
func (m *TicketModelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TicketModelMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.user_id != nil {
		fields = append(fields, ticketmodel.FieldUserID)
	}
	if m.tenant_id != nil {
		fields = append(fields, ticketmodel.FieldTenantID)
	}
	if m.subject != nil {
		fields = append(fields, ticketmodel.FieldSubject)
	}
	if m.body != nil {
		fields = append(fields, ticketmodel.FieldBody)
	}
	if m.category != nil {
		fields = append(fields, ticketmodel.FieldCategory)
	}
	if m.label != nil {
		fields = append(fields, ticketmodel.FieldLabel)
	}
	if m.assignee_id != nil {
		fields = append(fields, ticketmodel.FieldAssigneeID)
	}
	if m.severity != nil {
		fields = append(fields, ticketmodel.FieldSeverity)
	}
	if m.status != nil {
		fields = append(fields, ticketmodel.FieldStatus)
	}
	if m.time != nil {
		fields = append(fields, ticketmodel.FieldTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TicketModelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ticketmodel.FieldUserID:
		return m.UserID()
	case ticketmodel.FieldTenantID:
		return m.TenantID()
	case ticketmodel.FieldSubject:
		return m.Subject()
	case ticketmodel.FieldBody:
		return m.Body()
	case ticketmodel.FieldCategory:
		return m.Category()
	case ticketmodel.FieldLabel:
		return m.Label()
	case ticketmodel.FieldAssigneeID:
		return m.AssigneeID()
	case ticketmodel.FieldSeverity:
		return m.Severity()
	case ticketmodel.FieldStatus:
		return m.Status()
	case ticketmodel.FieldTime:
		return m.Time()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TicketModelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ticketmodel.FieldUserID:
		return m.OldUserID(ctx)
	case ticketmodel.FieldTenantID:
		return m.OldTenantID(ctx)
	case ticketmodel.FieldSubject:
		return m.OldSubject(ctx)
	case ticketmodel.FieldBody:
		return m.OldBody(ctx)
	case ticketmodel.FieldCategory:
		return m.OldCategory(ctx)
	case ticketmodel.FieldLabel:
		return m.OldLabel(ctx)
	case ticketmodel.FieldAssigneeID:
		return m.OldAssigneeID(ctx)
	case ticketmodel.FieldSeverity:
		return m.OldSeverity(ctx)
	case ticketmodel.FieldStatus:
		return m.OldStatus(ctx)
	case ticketmodel.FieldTime:
		return m.OldTime(ctx)
	}
	return nil, fmt.Errorf("unknown TicketModel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketModelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ticketmodel.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case ticketmodel.FieldTenantID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case ticketmodel.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case ticketmodel.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case ticketmodel.FieldCategory:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case ticketmodel.FieldLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabel(v)
		return nil
	case ticketmodel.FieldAssigneeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssigneeID(v)
		return nil
	case ticketmodel.FieldSeverity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeverity(v)
		return nil
	case ticketmodel.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case ticketmodel.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	}
	return fmt.Errorf("unknown TicketModel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TicketModelMutation) AddedFields() []string {
	var fields []string
	if m.addseverity != nil {
		fields = append(fields, ticketmodel.FieldSeverity)
	}
	if m.addstatus != nil {
		fields = append(fields, ticketmodel.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TicketModelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case ticketmodel.FieldSeverity:
		return m.AddedSeverity()
	case ticketmodel.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketModelMutation) AddField(name string, value ent.Value) error {
	switch name {
	case ticketmodel.FieldSeverity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSeverity(v)
		return nil
	case ticketmodel.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown TicketModel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TicketModelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TicketModelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TicketModelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TicketModel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TicketModelMutation) ResetField(name string) error {
	switch name {
	case ticketmodel.FieldUserID:
		m.ResetUserID()
		return nil
	case ticketmodel.FieldTenantID:
		m.ResetTenantID()
		return nil
	case ticketmodel.FieldSubject:
		m.ResetSubject()
		return nil
	case ticketmodel.FieldBody:
		m.ResetBody()
		return nil
	case ticketmodel.FieldCategory:
		m.ResetCategory()
		return nil
	case ticketmodel.FieldLabel:
		m.ResetLabel()
		return nil
	case ticketmodel.FieldAssigneeID:
		m.ResetAssigneeID()
		return nil
	case ticketmodel.FieldSeverity:
		m.ResetSeverity()
		return nil
	case ticketmodel.FieldStatus:
		m.ResetStatus()
		return nil
	case ticketmodel.FieldTime:
		m.ResetTime()
		return nil
	}
	return fmt.Errorf("unknown TicketModel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TicketModelMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TicketModelMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TicketModelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TicketModelMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TicketModelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TicketModelMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TicketModelMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TicketModel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TicketModelMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TicketModel edge %s", name)
}

// UserModelMutation represents an operation that mutates the UserModel nodes in the graph.
type UserModelMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	user_name     *string
	pswd          *string
	tenant_id     *uuid.UUID
	role          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserModel, error)
	predicates    []predicate.UserModel
}

var _ ent.Mutation = (*UserModelMutation)(nil)

// usermodelOption allows management of the mutation configuration using functional options.
type usermodelOption func(*UserModelMutation)

// newUserModelMutation creates new mutation for the UserModel entity.
func newUserModelMutation(c config, op Op, opts ...usermodelOption) *UserModelMutation {
	m := &UserModelMutation{
		config:        c,
		op:            op,
		typ:           TypeUserModel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserModelID sets the ID field of the mutation.
func withUserModelID(id uuid.UUID) usermodelOption {
	return func(m *UserModelMutation) {
		var (
			err   error
			once  sync.Once
			value *UserModel
		)
		m.oldValue = func(ctx context.Context) (*UserModel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserModel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserModel sets the old UserModel of the mutation.
func withUserModel(node *UserModel) usermodelOption {
	return func(m *UserModelMutation) {
		m.oldValue = func(context.Context) (*UserModel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserModelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserModelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserModel entities.
func (m *UserModelMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserModelMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserModelMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserModel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserName sets the "user_name" field.
func (m *UserModelMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *UserModelMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "user_name" field's value of the UserModel entity.
// If the UserModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserModelMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *UserModelMutation) ResetUserName() {
	m.user_name = nil
}

// SetPswd sets the "pswd" field.
func (m *UserModelMutation) SetPswd(s string) {
	m.pswd = &s
}

// Pswd returns the value of the "pswd" field in the mutation.
func (m *UserModelMutation) Pswd() (r string, exists bool) {
	v := m.pswd
	if v == nil {
		return
	}
	return *v, true
}

// OldPswd returns the old "pswd" field's value of the UserModel entity.
// If the UserModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserModelMutation) OldPswd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPswd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPswd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPswd: %w", err)
	}
	return oldValue.Pswd, nil
}

// ResetPswd resets all changes to the "pswd" field.
func (m *UserModelMutation) ResetPswd() {
	m.pswd = nil
}

// SetTenantID sets the "tenant_id" field.
func (m *UserModelMutation) SetTenantID(u uuid.UUID) {
	m.tenant_id = &u
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *UserModelMutation) TenantID() (r uuid.UUID, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the UserModel entity.
// If the UserModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserModelMutation) OldTenantID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *UserModelMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetRole sets the "role" field.
func (m *UserModelMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *UserModelMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the UserModel entity.
// If the UserModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserModelMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserModelMutation) ResetRole() {
	m.role = nil
}

// Where appends a list predicates to the UserModelMutation builder.
func (m *UserModelMutation) Where(ps ...predicate.UserModel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserModelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserModelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserModel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserModelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserModelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserModel).
func (m *UserModelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserModelMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.user_name != nil {
		fields = append(fields, usermodel.FieldUserName)
	}
	if m.pswd != nil {
		fields = append(fields, usermodel.FieldPswd)
	}
	if m.tenant_id != nil {
		fields = append(fields, usermodel.FieldTenantID)
	}
	if m.role != nil {
		fields = append(fields, usermodel.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserModelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usermodel.FieldUserName:
		return m.UserName()
	case usermodel.FieldPswd:
		return m.Pswd()
	case usermodel.FieldTenantID:
		return m.TenantID()
	case usermodel.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserModelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usermodel.FieldUserName:
		return m.OldUserName(ctx)
	case usermodel.FieldPswd:
		return m.OldPswd(ctx)
	case usermodel.FieldTenantID:
		return m.OldTenantID(ctx)
	case usermodel.FieldRole:
		return m.OldRole(ctx)
	}
	return nil, fmt.Errorf("unknown UserModel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserModelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usermodel.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case usermodel.FieldPswd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPswd(v)
		return nil
	case usermodel.FieldTenantID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case usermodel.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown UserModel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserModelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserModelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserModelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserModel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserModelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserModelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserModelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserModel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserModelMutation) ResetField(name string) error {
	switch name {
	case usermodel.FieldUserName:
		m.ResetUserName()
		return nil
	case usermodel.FieldPswd:
		m.ResetPswd()
		return nil
	case usermodel.FieldTenantID:
		m.ResetTenantID()
		return nil
	case usermodel.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown UserModel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserModelMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserModelMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserModelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserModelMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserModelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserModelMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserModelMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserModel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserModelMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserModel edge %s", name)
}
