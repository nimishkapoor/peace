// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"kapt/kapt/gql/ent/attachmentmodel"
	"kapt/kapt/gql/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttachmentModelDelete is the builder for deleting a AttachmentModel entity.
type AttachmentModelDelete struct {
	config
	hooks    []Hook
	mutation *AttachmentModelMutation
}

// Where appends a list predicates to the AttachmentModelDelete builder.
func (amd *AttachmentModelDelete) Where(ps ...predicate.AttachmentModel) *AttachmentModelDelete {
	amd.mutation.Where(ps...)
	return amd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (amd *AttachmentModelDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, amd.sqlExec, amd.mutation, amd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (amd *AttachmentModelDelete) ExecX(ctx context.Context) int {
	n, err := amd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (amd *AttachmentModelDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(attachmentmodel.Table, sqlgraph.NewFieldSpec(attachmentmodel.FieldID, field.TypeUUID))
	if ps := amd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, amd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	amd.mutation.done = true
	return affected, err
}

// AttachmentModelDeleteOne is the builder for deleting a single AttachmentModel entity.
type AttachmentModelDeleteOne struct {
	amd *AttachmentModelDelete
}

// Where appends a list predicates to the AttachmentModelDelete builder.
func (amdo *AttachmentModelDeleteOne) Where(ps ...predicate.AttachmentModel) *AttachmentModelDeleteOne {
	amdo.amd.mutation.Where(ps...)
	return amdo
}

// Exec executes the deletion query.
func (amdo *AttachmentModelDeleteOne) Exec(ctx context.Context) error {
	n, err := amdo.amd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{attachmentmodel.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (amdo *AttachmentModelDeleteOne) ExecX(ctx context.Context) {
	if err := amdo.Exec(ctx); err != nil {
		panic(err)
	}
}
