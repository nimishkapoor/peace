// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kapt/kapt/gql/ent/predicate"
	"kapt/kapt/gql/ent/usermodel"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserModelUpdate is the builder for updating UserModel entities.
type UserModelUpdate struct {
	config
	hooks    []Hook
	mutation *UserModelMutation
}

// Where appends a list predicates to the UserModelUpdate builder.
func (umu *UserModelUpdate) Where(ps ...predicate.UserModel) *UserModelUpdate {
	umu.mutation.Where(ps...)
	return umu
}

// SetUserName sets the "user_name" field.
func (umu *UserModelUpdate) SetUserName(s string) *UserModelUpdate {
	umu.mutation.SetUserName(s)
	return umu
}

// SetPswd sets the "pswd" field.
func (umu *UserModelUpdate) SetPswd(s string) *UserModelUpdate {
	umu.mutation.SetPswd(s)
	return umu
}

// SetTenantID sets the "tenant_id" field.
func (umu *UserModelUpdate) SetTenantID(u uuid.UUID) *UserModelUpdate {
	umu.mutation.SetTenantID(u)
	return umu
}

// SetRole sets the "role" field.
func (umu *UserModelUpdate) SetRole(s string) *UserModelUpdate {
	umu.mutation.SetRole(s)
	return umu
}

// Mutation returns the UserModelMutation object of the builder.
func (umu *UserModelUpdate) Mutation() *UserModelMutation {
	return umu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (umu *UserModelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, umu.sqlSave, umu.mutation, umu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umu *UserModelUpdate) SaveX(ctx context.Context) int {
	affected, err := umu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (umu *UserModelUpdate) Exec(ctx context.Context) error {
	_, err := umu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umu *UserModelUpdate) ExecX(ctx context.Context) {
	if err := umu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (umu *UserModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usermodel.Table, usermodel.Columns, sqlgraph.NewFieldSpec(usermodel.FieldID, field.TypeUUID))
	if ps := umu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umu.mutation.UserName(); ok {
		_spec.SetField(usermodel.FieldUserName, field.TypeString, value)
	}
	if value, ok := umu.mutation.Pswd(); ok {
		_spec.SetField(usermodel.FieldPswd, field.TypeString, value)
	}
	if value, ok := umu.mutation.TenantID(); ok {
		_spec.SetField(usermodel.FieldTenantID, field.TypeUUID, value)
	}
	if value, ok := umu.mutation.Role(); ok {
		_spec.SetField(usermodel.FieldRole, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, umu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	umu.mutation.done = true
	return n, nil
}

// UserModelUpdateOne is the builder for updating a single UserModel entity.
type UserModelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserModelMutation
}

// SetUserName sets the "user_name" field.
func (umuo *UserModelUpdateOne) SetUserName(s string) *UserModelUpdateOne {
	umuo.mutation.SetUserName(s)
	return umuo
}

// SetPswd sets the "pswd" field.
func (umuo *UserModelUpdateOne) SetPswd(s string) *UserModelUpdateOne {
	umuo.mutation.SetPswd(s)
	return umuo
}

// SetTenantID sets the "tenant_id" field.
func (umuo *UserModelUpdateOne) SetTenantID(u uuid.UUID) *UserModelUpdateOne {
	umuo.mutation.SetTenantID(u)
	return umuo
}

// SetRole sets the "role" field.
func (umuo *UserModelUpdateOne) SetRole(s string) *UserModelUpdateOne {
	umuo.mutation.SetRole(s)
	return umuo
}

// Mutation returns the UserModelMutation object of the builder.
func (umuo *UserModelUpdateOne) Mutation() *UserModelMutation {
	return umuo.mutation
}

// Where appends a list predicates to the UserModelUpdate builder.
func (umuo *UserModelUpdateOne) Where(ps ...predicate.UserModel) *UserModelUpdateOne {
	umuo.mutation.Where(ps...)
	return umuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (umuo *UserModelUpdateOne) Select(field string, fields ...string) *UserModelUpdateOne {
	umuo.fields = append([]string{field}, fields...)
	return umuo
}

// Save executes the query and returns the updated UserModel entity.
func (umuo *UserModelUpdateOne) Save(ctx context.Context) (*UserModel, error) {
	return withHooks(ctx, umuo.sqlSave, umuo.mutation, umuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umuo *UserModelUpdateOne) SaveX(ctx context.Context) *UserModel {
	node, err := umuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (umuo *UserModelUpdateOne) Exec(ctx context.Context) error {
	_, err := umuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umuo *UserModelUpdateOne) ExecX(ctx context.Context) {
	if err := umuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (umuo *UserModelUpdateOne) sqlSave(ctx context.Context) (_node *UserModel, err error) {
	_spec := sqlgraph.NewUpdateSpec(usermodel.Table, usermodel.Columns, sqlgraph.NewFieldSpec(usermodel.FieldID, field.TypeUUID))
	id, ok := umuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserModel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := umuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usermodel.FieldID)
		for _, f := range fields {
			if !usermodel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usermodel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := umuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umuo.mutation.UserName(); ok {
		_spec.SetField(usermodel.FieldUserName, field.TypeString, value)
	}
	if value, ok := umuo.mutation.Pswd(); ok {
		_spec.SetField(usermodel.FieldPswd, field.TypeString, value)
	}
	if value, ok := umuo.mutation.TenantID(); ok {
		_spec.SetField(usermodel.FieldTenantID, field.TypeUUID, value)
	}
	if value, ok := umuo.mutation.Role(); ok {
		_spec.SetField(usermodel.FieldRole, field.TypeString, value)
	}
	_node = &UserModel{config: umuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, umuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	umuo.mutation.done = true
	return _node, nil
}
