// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"kapt/kapt/gql/ent/migrate"

	"kapt/kapt/gql/ent/attachmentmodel"
	"kapt/kapt/gql/ent/categorymodel"
	"kapt/kapt/gql/ent/tenantmodel"
	"kapt/kapt/gql/ent/threadmodel"
	"kapt/kapt/gql/ent/ticketmodel"
	"kapt/kapt/gql/ent/usermodel"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AttachmentModel is the client for interacting with the AttachmentModel builders.
	AttachmentModel *AttachmentModelClient
	// CategoryModel is the client for interacting with the CategoryModel builders.
	CategoryModel *CategoryModelClient
	// TenantModel is the client for interacting with the TenantModel builders.
	TenantModel *TenantModelClient
	// ThreadModel is the client for interacting with the ThreadModel builders.
	ThreadModel *ThreadModelClient
	// TicketModel is the client for interacting with the TicketModel builders.
	TicketModel *TicketModelClient
	// UserModel is the client for interacting with the UserModel builders.
	UserModel *UserModelClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AttachmentModel = NewAttachmentModelClient(c.config)
	c.CategoryModel = NewCategoryModelClient(c.config)
	c.TenantModel = NewTenantModelClient(c.config)
	c.ThreadModel = NewThreadModelClient(c.config)
	c.TicketModel = NewTicketModelClient(c.config)
	c.UserModel = NewUserModelClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		AttachmentModel: NewAttachmentModelClient(cfg),
		CategoryModel:   NewCategoryModelClient(cfg),
		TenantModel:     NewTenantModelClient(cfg),
		ThreadModel:     NewThreadModelClient(cfg),
		TicketModel:     NewTicketModelClient(cfg),
		UserModel:       NewUserModelClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		AttachmentModel: NewAttachmentModelClient(cfg),
		CategoryModel:   NewCategoryModelClient(cfg),
		TenantModel:     NewTenantModelClient(cfg),
		ThreadModel:     NewThreadModelClient(cfg),
		TicketModel:     NewTicketModelClient(cfg),
		UserModel:       NewUserModelClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AttachmentModel.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AttachmentModel, c.CategoryModel, c.TenantModel, c.ThreadModel, c.TicketModel,
		c.UserModel,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AttachmentModel, c.CategoryModel, c.TenantModel, c.ThreadModel, c.TicketModel,
		c.UserModel,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AttachmentModelMutation:
		return c.AttachmentModel.mutate(ctx, m)
	case *CategoryModelMutation:
		return c.CategoryModel.mutate(ctx, m)
	case *TenantModelMutation:
		return c.TenantModel.mutate(ctx, m)
	case *ThreadModelMutation:
		return c.ThreadModel.mutate(ctx, m)
	case *TicketModelMutation:
		return c.TicketModel.mutate(ctx, m)
	case *UserModelMutation:
		return c.UserModel.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AttachmentModelClient is a client for the AttachmentModel schema.
type AttachmentModelClient struct {
	config
}

// NewAttachmentModelClient returns a client for the AttachmentModel from the given config.
func NewAttachmentModelClient(c config) *AttachmentModelClient {
	return &AttachmentModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attachmentmodel.Hooks(f(g(h())))`.
func (c *AttachmentModelClient) Use(hooks ...Hook) {
	c.hooks.AttachmentModel = append(c.hooks.AttachmentModel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `attachmentmodel.Intercept(f(g(h())))`.
func (c *AttachmentModelClient) Intercept(interceptors ...Interceptor) {
	c.inters.AttachmentModel = append(c.inters.AttachmentModel, interceptors...)
}

// Create returns a builder for creating a AttachmentModel entity.
func (c *AttachmentModelClient) Create() *AttachmentModelCreate {
	mutation := newAttachmentModelMutation(c.config, OpCreate)
	return &AttachmentModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AttachmentModel entities.
func (c *AttachmentModelClient) CreateBulk(builders ...*AttachmentModelCreate) *AttachmentModelCreateBulk {
	return &AttachmentModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AttachmentModel.
func (c *AttachmentModelClient) Update() *AttachmentModelUpdate {
	mutation := newAttachmentModelMutation(c.config, OpUpdate)
	return &AttachmentModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttachmentModelClient) UpdateOne(am *AttachmentModel) *AttachmentModelUpdateOne {
	mutation := newAttachmentModelMutation(c.config, OpUpdateOne, withAttachmentModel(am))
	return &AttachmentModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttachmentModelClient) UpdateOneID(id uuid.UUID) *AttachmentModelUpdateOne {
	mutation := newAttachmentModelMutation(c.config, OpUpdateOne, withAttachmentModelID(id))
	return &AttachmentModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AttachmentModel.
func (c *AttachmentModelClient) Delete() *AttachmentModelDelete {
	mutation := newAttachmentModelMutation(c.config, OpDelete)
	return &AttachmentModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttachmentModelClient) DeleteOne(am *AttachmentModel) *AttachmentModelDeleteOne {
	return c.DeleteOneID(am.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttachmentModelClient) DeleteOneID(id uuid.UUID) *AttachmentModelDeleteOne {
	builder := c.Delete().Where(attachmentmodel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttachmentModelDeleteOne{builder}
}

// Query returns a query builder for AttachmentModel.
func (c *AttachmentModelClient) Query() *AttachmentModelQuery {
	return &AttachmentModelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAttachmentModel},
		inters: c.Interceptors(),
	}
}

// Get returns a AttachmentModel entity by its id.
func (c *AttachmentModelClient) Get(ctx context.Context, id uuid.UUID) (*AttachmentModel, error) {
	return c.Query().Where(attachmentmodel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttachmentModelClient) GetX(ctx context.Context, id uuid.UUID) *AttachmentModel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AttachmentModelClient) Hooks() []Hook {
	return c.hooks.AttachmentModel
}

// Interceptors returns the client interceptors.
func (c *AttachmentModelClient) Interceptors() []Interceptor {
	return c.inters.AttachmentModel
}

func (c *AttachmentModelClient) mutate(ctx context.Context, m *AttachmentModelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AttachmentModelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AttachmentModelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AttachmentModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AttachmentModelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AttachmentModel mutation op: %q", m.Op())
	}
}

// CategoryModelClient is a client for the CategoryModel schema.
type CategoryModelClient struct {
	config
}

// NewCategoryModelClient returns a client for the CategoryModel from the given config.
func NewCategoryModelClient(c config) *CategoryModelClient {
	return &CategoryModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `categorymodel.Hooks(f(g(h())))`.
func (c *CategoryModelClient) Use(hooks ...Hook) {
	c.hooks.CategoryModel = append(c.hooks.CategoryModel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `categorymodel.Intercept(f(g(h())))`.
func (c *CategoryModelClient) Intercept(interceptors ...Interceptor) {
	c.inters.CategoryModel = append(c.inters.CategoryModel, interceptors...)
}

// Create returns a builder for creating a CategoryModel entity.
func (c *CategoryModelClient) Create() *CategoryModelCreate {
	mutation := newCategoryModelMutation(c.config, OpCreate)
	return &CategoryModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CategoryModel entities.
func (c *CategoryModelClient) CreateBulk(builders ...*CategoryModelCreate) *CategoryModelCreateBulk {
	return &CategoryModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CategoryModel.
func (c *CategoryModelClient) Update() *CategoryModelUpdate {
	mutation := newCategoryModelMutation(c.config, OpUpdate)
	return &CategoryModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryModelClient) UpdateOne(cm *CategoryModel) *CategoryModelUpdateOne {
	mutation := newCategoryModelMutation(c.config, OpUpdateOne, withCategoryModel(cm))
	return &CategoryModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryModelClient) UpdateOneID(id uuid.UUID) *CategoryModelUpdateOne {
	mutation := newCategoryModelMutation(c.config, OpUpdateOne, withCategoryModelID(id))
	return &CategoryModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CategoryModel.
func (c *CategoryModelClient) Delete() *CategoryModelDelete {
	mutation := newCategoryModelMutation(c.config, OpDelete)
	return &CategoryModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CategoryModelClient) DeleteOne(cm *CategoryModel) *CategoryModelDeleteOne {
	return c.DeleteOneID(cm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CategoryModelClient) DeleteOneID(id uuid.UUID) *CategoryModelDeleteOne {
	builder := c.Delete().Where(categorymodel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryModelDeleteOne{builder}
}

// Query returns a query builder for CategoryModel.
func (c *CategoryModelClient) Query() *CategoryModelQuery {
	return &CategoryModelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCategoryModel},
		inters: c.Interceptors(),
	}
}

// Get returns a CategoryModel entity by its id.
func (c *CategoryModelClient) Get(ctx context.Context, id uuid.UUID) (*CategoryModel, error) {
	return c.Query().Where(categorymodel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryModelClient) GetX(ctx context.Context, id uuid.UUID) *CategoryModel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CategoryModelClient) Hooks() []Hook {
	return c.hooks.CategoryModel
}

// Interceptors returns the client interceptors.
func (c *CategoryModelClient) Interceptors() []Interceptor {
	return c.inters.CategoryModel
}

func (c *CategoryModelClient) mutate(ctx context.Context, m *CategoryModelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CategoryModelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CategoryModelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CategoryModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CategoryModelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CategoryModel mutation op: %q", m.Op())
	}
}

// TenantModelClient is a client for the TenantModel schema.
type TenantModelClient struct {
	config
}

// NewTenantModelClient returns a client for the TenantModel from the given config.
func NewTenantModelClient(c config) *TenantModelClient {
	return &TenantModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenantmodel.Hooks(f(g(h())))`.
func (c *TenantModelClient) Use(hooks ...Hook) {
	c.hooks.TenantModel = append(c.hooks.TenantModel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tenantmodel.Intercept(f(g(h())))`.
func (c *TenantModelClient) Intercept(interceptors ...Interceptor) {
	c.inters.TenantModel = append(c.inters.TenantModel, interceptors...)
}

// Create returns a builder for creating a TenantModel entity.
func (c *TenantModelClient) Create() *TenantModelCreate {
	mutation := newTenantModelMutation(c.config, OpCreate)
	return &TenantModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TenantModel entities.
func (c *TenantModelClient) CreateBulk(builders ...*TenantModelCreate) *TenantModelCreateBulk {
	return &TenantModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TenantModel.
func (c *TenantModelClient) Update() *TenantModelUpdate {
	mutation := newTenantModelMutation(c.config, OpUpdate)
	return &TenantModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantModelClient) UpdateOne(tm *TenantModel) *TenantModelUpdateOne {
	mutation := newTenantModelMutation(c.config, OpUpdateOne, withTenantModel(tm))
	return &TenantModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantModelClient) UpdateOneID(id uuid.UUID) *TenantModelUpdateOne {
	mutation := newTenantModelMutation(c.config, OpUpdateOne, withTenantModelID(id))
	return &TenantModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TenantModel.
func (c *TenantModelClient) Delete() *TenantModelDelete {
	mutation := newTenantModelMutation(c.config, OpDelete)
	return &TenantModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TenantModelClient) DeleteOne(tm *TenantModel) *TenantModelDeleteOne {
	return c.DeleteOneID(tm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TenantModelClient) DeleteOneID(id uuid.UUID) *TenantModelDeleteOne {
	builder := c.Delete().Where(tenantmodel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantModelDeleteOne{builder}
}

// Query returns a query builder for TenantModel.
func (c *TenantModelClient) Query() *TenantModelQuery {
	return &TenantModelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTenantModel},
		inters: c.Interceptors(),
	}
}

// Get returns a TenantModel entity by its id.
func (c *TenantModelClient) Get(ctx context.Context, id uuid.UUID) (*TenantModel, error) {
	return c.Query().Where(tenantmodel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantModelClient) GetX(ctx context.Context, id uuid.UUID) *TenantModel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TenantModelClient) Hooks() []Hook {
	return c.hooks.TenantModel
}

// Interceptors returns the client interceptors.
func (c *TenantModelClient) Interceptors() []Interceptor {
	return c.inters.TenantModel
}

func (c *TenantModelClient) mutate(ctx context.Context, m *TenantModelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TenantModelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TenantModelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TenantModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TenantModelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TenantModel mutation op: %q", m.Op())
	}
}

// ThreadModelClient is a client for the ThreadModel schema.
type ThreadModelClient struct {
	config
}

// NewThreadModelClient returns a client for the ThreadModel from the given config.
func NewThreadModelClient(c config) *ThreadModelClient {
	return &ThreadModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `threadmodel.Hooks(f(g(h())))`.
func (c *ThreadModelClient) Use(hooks ...Hook) {
	c.hooks.ThreadModel = append(c.hooks.ThreadModel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `threadmodel.Intercept(f(g(h())))`.
func (c *ThreadModelClient) Intercept(interceptors ...Interceptor) {
	c.inters.ThreadModel = append(c.inters.ThreadModel, interceptors...)
}

// Create returns a builder for creating a ThreadModel entity.
func (c *ThreadModelClient) Create() *ThreadModelCreate {
	mutation := newThreadModelMutation(c.config, OpCreate)
	return &ThreadModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ThreadModel entities.
func (c *ThreadModelClient) CreateBulk(builders ...*ThreadModelCreate) *ThreadModelCreateBulk {
	return &ThreadModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ThreadModel.
func (c *ThreadModelClient) Update() *ThreadModelUpdate {
	mutation := newThreadModelMutation(c.config, OpUpdate)
	return &ThreadModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ThreadModelClient) UpdateOne(tm *ThreadModel) *ThreadModelUpdateOne {
	mutation := newThreadModelMutation(c.config, OpUpdateOne, withThreadModel(tm))
	return &ThreadModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ThreadModelClient) UpdateOneID(id uuid.UUID) *ThreadModelUpdateOne {
	mutation := newThreadModelMutation(c.config, OpUpdateOne, withThreadModelID(id))
	return &ThreadModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ThreadModel.
func (c *ThreadModelClient) Delete() *ThreadModelDelete {
	mutation := newThreadModelMutation(c.config, OpDelete)
	return &ThreadModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ThreadModelClient) DeleteOne(tm *ThreadModel) *ThreadModelDeleteOne {
	return c.DeleteOneID(tm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ThreadModelClient) DeleteOneID(id uuid.UUID) *ThreadModelDeleteOne {
	builder := c.Delete().Where(threadmodel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ThreadModelDeleteOne{builder}
}

// Query returns a query builder for ThreadModel.
func (c *ThreadModelClient) Query() *ThreadModelQuery {
	return &ThreadModelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeThreadModel},
		inters: c.Interceptors(),
	}
}

// Get returns a ThreadModel entity by its id.
func (c *ThreadModelClient) Get(ctx context.Context, id uuid.UUID) (*ThreadModel, error) {
	return c.Query().Where(threadmodel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ThreadModelClient) GetX(ctx context.Context, id uuid.UUID) *ThreadModel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ThreadModelClient) Hooks() []Hook {
	return c.hooks.ThreadModel
}

// Interceptors returns the client interceptors.
func (c *ThreadModelClient) Interceptors() []Interceptor {
	return c.inters.ThreadModel
}

func (c *ThreadModelClient) mutate(ctx context.Context, m *ThreadModelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ThreadModelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ThreadModelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ThreadModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ThreadModelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ThreadModel mutation op: %q", m.Op())
	}
}

// TicketModelClient is a client for the TicketModel schema.
type TicketModelClient struct {
	config
}

// NewTicketModelClient returns a client for the TicketModel from the given config.
func NewTicketModelClient(c config) *TicketModelClient {
	return &TicketModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ticketmodel.Hooks(f(g(h())))`.
func (c *TicketModelClient) Use(hooks ...Hook) {
	c.hooks.TicketModel = append(c.hooks.TicketModel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ticketmodel.Intercept(f(g(h())))`.
func (c *TicketModelClient) Intercept(interceptors ...Interceptor) {
	c.inters.TicketModel = append(c.inters.TicketModel, interceptors...)
}

// Create returns a builder for creating a TicketModel entity.
func (c *TicketModelClient) Create() *TicketModelCreate {
	mutation := newTicketModelMutation(c.config, OpCreate)
	return &TicketModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TicketModel entities.
func (c *TicketModelClient) CreateBulk(builders ...*TicketModelCreate) *TicketModelCreateBulk {
	return &TicketModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TicketModel.
func (c *TicketModelClient) Update() *TicketModelUpdate {
	mutation := newTicketModelMutation(c.config, OpUpdate)
	return &TicketModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TicketModelClient) UpdateOne(tm *TicketModel) *TicketModelUpdateOne {
	mutation := newTicketModelMutation(c.config, OpUpdateOne, withTicketModel(tm))
	return &TicketModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TicketModelClient) UpdateOneID(id uuid.UUID) *TicketModelUpdateOne {
	mutation := newTicketModelMutation(c.config, OpUpdateOne, withTicketModelID(id))
	return &TicketModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TicketModel.
func (c *TicketModelClient) Delete() *TicketModelDelete {
	mutation := newTicketModelMutation(c.config, OpDelete)
	return &TicketModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TicketModelClient) DeleteOne(tm *TicketModel) *TicketModelDeleteOne {
	return c.DeleteOneID(tm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TicketModelClient) DeleteOneID(id uuid.UUID) *TicketModelDeleteOne {
	builder := c.Delete().Where(ticketmodel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TicketModelDeleteOne{builder}
}

// Query returns a query builder for TicketModel.
func (c *TicketModelClient) Query() *TicketModelQuery {
	return &TicketModelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTicketModel},
		inters: c.Interceptors(),
	}
}

// Get returns a TicketModel entity by its id.
func (c *TicketModelClient) Get(ctx context.Context, id uuid.UUID) (*TicketModel, error) {
	return c.Query().Where(ticketmodel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TicketModelClient) GetX(ctx context.Context, id uuid.UUID) *TicketModel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TicketModelClient) Hooks() []Hook {
	return c.hooks.TicketModel
}

// Interceptors returns the client interceptors.
func (c *TicketModelClient) Interceptors() []Interceptor {
	return c.inters.TicketModel
}

func (c *TicketModelClient) mutate(ctx context.Context, m *TicketModelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TicketModelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TicketModelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TicketModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TicketModelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TicketModel mutation op: %q", m.Op())
	}
}

// UserModelClient is a client for the UserModel schema.
type UserModelClient struct {
	config
}

// NewUserModelClient returns a client for the UserModel from the given config.
func NewUserModelClient(c config) *UserModelClient {
	return &UserModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usermodel.Hooks(f(g(h())))`.
func (c *UserModelClient) Use(hooks ...Hook) {
	c.hooks.UserModel = append(c.hooks.UserModel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usermodel.Intercept(f(g(h())))`.
func (c *UserModelClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserModel = append(c.inters.UserModel, interceptors...)
}

// Create returns a builder for creating a UserModel entity.
func (c *UserModelClient) Create() *UserModelCreate {
	mutation := newUserModelMutation(c.config, OpCreate)
	return &UserModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserModel entities.
func (c *UserModelClient) CreateBulk(builders ...*UserModelCreate) *UserModelCreateBulk {
	return &UserModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserModel.
func (c *UserModelClient) Update() *UserModelUpdate {
	mutation := newUserModelMutation(c.config, OpUpdate)
	return &UserModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserModelClient) UpdateOne(um *UserModel) *UserModelUpdateOne {
	mutation := newUserModelMutation(c.config, OpUpdateOne, withUserModel(um))
	return &UserModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserModelClient) UpdateOneID(id uuid.UUID) *UserModelUpdateOne {
	mutation := newUserModelMutation(c.config, OpUpdateOne, withUserModelID(id))
	return &UserModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserModel.
func (c *UserModelClient) Delete() *UserModelDelete {
	mutation := newUserModelMutation(c.config, OpDelete)
	return &UserModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserModelClient) DeleteOne(um *UserModel) *UserModelDeleteOne {
	return c.DeleteOneID(um.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserModelClient) DeleteOneID(id uuid.UUID) *UserModelDeleteOne {
	builder := c.Delete().Where(usermodel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserModelDeleteOne{builder}
}

// Query returns a query builder for UserModel.
func (c *UserModelClient) Query() *UserModelQuery {
	return &UserModelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserModel},
		inters: c.Interceptors(),
	}
}

// Get returns a UserModel entity by its id.
func (c *UserModelClient) Get(ctx context.Context, id uuid.UUID) (*UserModel, error) {
	return c.Query().Where(usermodel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserModelClient) GetX(ctx context.Context, id uuid.UUID) *UserModel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserModelClient) Hooks() []Hook {
	return c.hooks.UserModel
}

// Interceptors returns the client interceptors.
func (c *UserModelClient) Interceptors() []Interceptor {
	return c.inters.UserModel
}

func (c *UserModelClient) mutate(ctx context.Context, m *UserModelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserModelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserModelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserModelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserModel mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AttachmentModel, CategoryModel, TenantModel, ThreadModel, TicketModel,
		UserModel []ent.Hook
	}
	inters struct {
		AttachmentModel, CategoryModel, TenantModel, ThreadModel, TicketModel,
		UserModel []ent.Interceptor
	}
)
