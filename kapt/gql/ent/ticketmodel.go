// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kapt/kapt/gql/ent/ticketmodel"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TicketModel is the model entity for the TicketModel schema.
type TicketModel struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID uuid.UUID `json:"tenant_id,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Category holds the value of the "category" field.
	Category uuid.UUID `json:"category,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// AssigneeID holds the value of the "assignee_id" field.
	AssigneeID uuid.UUID `json:"assignee_id,omitempty"`
	// Severity holds the value of the "severity" field.
	Severity int `json:"severity,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// ClientPriority holds the value of the "client_priority" field.
	ClientPriority int `json:"client_priority,omitempty"`
	// Source holds the value of the "source" field.
	Source       string `json:"source,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TicketModel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticketmodel.FieldSeverity, ticketmodel.FieldStatus, ticketmodel.FieldClientPriority:
			values[i] = new(sql.NullInt64)
		case ticketmodel.FieldSubject, ticketmodel.FieldBody, ticketmodel.FieldLabel, ticketmodel.FieldSource:
			values[i] = new(sql.NullString)
		case ticketmodel.FieldTime:
			values[i] = new(sql.NullTime)
		case ticketmodel.FieldID, ticketmodel.FieldUserID, ticketmodel.FieldTenantID, ticketmodel.FieldCategory, ticketmodel.FieldAssigneeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TicketModel fields.
func (tm *TicketModel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticketmodel.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tm.ID = *value
			}
		case ticketmodel.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				tm.UserID = *value
			}
		case ticketmodel.FieldTenantID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				tm.TenantID = *value
			}
		case ticketmodel.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				tm.Subject = value.String
			}
		case ticketmodel.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				tm.Body = value.String
			}
		case ticketmodel.FieldCategory:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value != nil {
				tm.Category = *value
			}
		case ticketmodel.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				tm.Label = value.String
			}
		case ticketmodel.FieldAssigneeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field assignee_id", values[i])
			} else if value != nil {
				tm.AssigneeID = *value
			}
		case ticketmodel.FieldSeverity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field severity", values[i])
			} else if value.Valid {
				tm.Severity = int(value.Int64)
			}
		case ticketmodel.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				tm.Status = int(value.Int64)
			}
		case ticketmodel.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				tm.Time = value.Time
			}
		case ticketmodel.FieldClientPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field client_priority", values[i])
			} else if value.Valid {
				tm.ClientPriority = int(value.Int64)
			}
		case ticketmodel.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				tm.Source = value.String
			}
		default:
			tm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TicketModel.
// This includes values selected through modifiers, order, etc.
func (tm *TicketModel) Value(name string) (ent.Value, error) {
	return tm.selectValues.Get(name)
}

// Update returns a builder for updating this TicketModel.
// Note that you need to call TicketModel.Unwrap() before calling this method if this TicketModel
// was returned from a transaction, and the transaction was committed or rolled back.
func (tm *TicketModel) Update() *TicketModelUpdateOne {
	return NewTicketModelClient(tm.config).UpdateOne(tm)
}

// Unwrap unwraps the TicketModel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tm *TicketModel) Unwrap() *TicketModel {
	_tx, ok := tm.config.driver.(*txDriver)
	if !ok {
		panic("ent: TicketModel is not a transactional entity")
	}
	tm.config.driver = _tx.drv
	return tm
}

// String implements the fmt.Stringer.
func (tm *TicketModel) String() string {
	var builder strings.Builder
	builder.WriteString("TicketModel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tm.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", tm.UserID))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", tm.TenantID))
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(tm.Subject)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(tm.Body)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", tm.Category))
	builder.WriteString(", ")
	builder.WriteString("label=")
	builder.WriteString(tm.Label)
	builder.WriteString(", ")
	builder.WriteString("assignee_id=")
	builder.WriteString(fmt.Sprintf("%v", tm.AssigneeID))
	builder.WriteString(", ")
	builder.WriteString("severity=")
	builder.WriteString(fmt.Sprintf("%v", tm.Severity))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", tm.Status))
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(tm.Time.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("client_priority=")
	builder.WriteString(fmt.Sprintf("%v", tm.ClientPriority))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(tm.Source)
	builder.WriteByte(')')
	return builder.String()
}

// TicketModels is a parsable slice of TicketModel.
type TicketModels []*TicketModel
