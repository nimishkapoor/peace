// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kapt/kapt/gql/ent/categorymodel"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CategoryModelCreate is the builder for creating a CategoryModel entity.
type CategoryModelCreate struct {
	config
	mutation *CategoryModelMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cmc *CategoryModelCreate) SetName(s string) *CategoryModelCreate {
	cmc.mutation.SetName(s)
	return cmc
}

// SetTenantID sets the "tenant_id" field.
func (cmc *CategoryModelCreate) SetTenantID(u uuid.UUID) *CategoryModelCreate {
	cmc.mutation.SetTenantID(u)
	return cmc
}

// SetID sets the "id" field.
func (cmc *CategoryModelCreate) SetID(u uuid.UUID) *CategoryModelCreate {
	cmc.mutation.SetID(u)
	return cmc
}

// Mutation returns the CategoryModelMutation object of the builder.
func (cmc *CategoryModelCreate) Mutation() *CategoryModelMutation {
	return cmc.mutation
}

// Save creates the CategoryModel in the database.
func (cmc *CategoryModelCreate) Save(ctx context.Context) (*CategoryModel, error) {
	return withHooks(ctx, cmc.sqlSave, cmc.mutation, cmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *CategoryModelCreate) SaveX(ctx context.Context) *CategoryModel {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *CategoryModelCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *CategoryModelCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *CategoryModelCreate) check() error {
	if _, ok := cmc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CategoryModel.name"`)}
	}
	if _, ok := cmc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CategoryModel.tenant_id"`)}
	}
	return nil
}

func (cmc *CategoryModelCreate) sqlSave(ctx context.Context) (*CategoryModel, error) {
	if err := cmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cmc.mutation.id = &_node.ID
	cmc.mutation.done = true
	return _node, nil
}

func (cmc *CategoryModelCreate) createSpec() (*CategoryModel, *sqlgraph.CreateSpec) {
	var (
		_node = &CategoryModel{config: cmc.config}
		_spec = sqlgraph.NewCreateSpec(categorymodel.Table, sqlgraph.NewFieldSpec(categorymodel.FieldID, field.TypeUUID))
	)
	if id, ok := cmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cmc.mutation.Name(); ok {
		_spec.SetField(categorymodel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cmc.mutation.TenantID(); ok {
		_spec.SetField(categorymodel.FieldTenantID, field.TypeUUID, value)
		_node.TenantID = value
	}
	return _node, _spec
}

// CategoryModelCreateBulk is the builder for creating many CategoryModel entities in bulk.
type CategoryModelCreateBulk struct {
	config
	builders []*CategoryModelCreate
}

// Save creates the CategoryModel entities in the database.
func (cmcb *CategoryModelCreateBulk) Save(ctx context.Context) ([]*CategoryModel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*CategoryModel, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CategoryModelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *CategoryModelCreateBulk) SaveX(ctx context.Context) []*CategoryModel {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *CategoryModelCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *CategoryModelCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
