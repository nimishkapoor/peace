// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kapt/kapt/gql/ent/attachmentmodel"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// AttachmentModel is the model entity for the AttachmentModel schema.
type AttachmentModel struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// ThreadID holds the value of the "thread_id" field.
	ThreadID     uuid.UUID `json:"thread_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AttachmentModel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attachmentmodel.FieldLink:
			values[i] = new(sql.NullString)
		case attachmentmodel.FieldID, attachmentmodel.FieldThreadID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AttachmentModel fields.
func (am *AttachmentModel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attachmentmodel.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				am.ID = *value
			}
		case attachmentmodel.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				am.Link = value.String
			}
		case attachmentmodel.FieldThreadID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field thread_id", values[i])
			} else if value != nil {
				am.ThreadID = *value
			}
		default:
			am.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AttachmentModel.
// This includes values selected through modifiers, order, etc.
func (am *AttachmentModel) Value(name string) (ent.Value, error) {
	return am.selectValues.Get(name)
}

// Update returns a builder for updating this AttachmentModel.
// Note that you need to call AttachmentModel.Unwrap() before calling this method if this AttachmentModel
// was returned from a transaction, and the transaction was committed or rolled back.
func (am *AttachmentModel) Update() *AttachmentModelUpdateOne {
	return NewAttachmentModelClient(am.config).UpdateOne(am)
}

// Unwrap unwraps the AttachmentModel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (am *AttachmentModel) Unwrap() *AttachmentModel {
	_tx, ok := am.config.driver.(*txDriver)
	if !ok {
		panic("ent: AttachmentModel is not a transactional entity")
	}
	am.config.driver = _tx.drv
	return am
}

// String implements the fmt.Stringer.
func (am *AttachmentModel) String() string {
	var builder strings.Builder
	builder.WriteString("AttachmentModel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", am.ID))
	builder.WriteString("link=")
	builder.WriteString(am.Link)
	builder.WriteString(", ")
	builder.WriteString("thread_id=")
	builder.WriteString(fmt.Sprintf("%v", am.ThreadID))
	builder.WriteByte(')')
	return builder.String()
}

// AttachmentModels is a parsable slice of AttachmentModel.
type AttachmentModels []*AttachmentModel
