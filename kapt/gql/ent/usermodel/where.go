// Code generated by ent, DO NOT EDIT.

package usermodel

import (
	"kapt/kapt/gql/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldLTE(FieldID, id))
}

// UserName applies equality check predicate on the "user_name" field. It's identical to UserNameEQ.
func UserName(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldEQ(FieldUserName, v))
}

// Pswd applies equality check predicate on the "pswd" field. It's identical to PswdEQ.
func Pswd(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldEQ(FieldPswd, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldEQ(FieldTenantID, v))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldEQ(FieldRole, v))
}

// UserNameEQ applies the EQ predicate on the "user_name" field.
func UserNameEQ(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldEQ(FieldUserName, v))
}

// UserNameNEQ applies the NEQ predicate on the "user_name" field.
func UserNameNEQ(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldNEQ(FieldUserName, v))
}

// UserNameIn applies the In predicate on the "user_name" field.
func UserNameIn(vs ...string) predicate.UserModel {
	return predicate.UserModel(sql.FieldIn(FieldUserName, vs...))
}

// UserNameNotIn applies the NotIn predicate on the "user_name" field.
func UserNameNotIn(vs ...string) predicate.UserModel {
	return predicate.UserModel(sql.FieldNotIn(FieldUserName, vs...))
}

// UserNameGT applies the GT predicate on the "user_name" field.
func UserNameGT(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldGT(FieldUserName, v))
}

// UserNameGTE applies the GTE predicate on the "user_name" field.
func UserNameGTE(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldGTE(FieldUserName, v))
}

// UserNameLT applies the LT predicate on the "user_name" field.
func UserNameLT(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldLT(FieldUserName, v))
}

// UserNameLTE applies the LTE predicate on the "user_name" field.
func UserNameLTE(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldLTE(FieldUserName, v))
}

// UserNameContains applies the Contains predicate on the "user_name" field.
func UserNameContains(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldContains(FieldUserName, v))
}

// UserNameHasPrefix applies the HasPrefix predicate on the "user_name" field.
func UserNameHasPrefix(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldHasPrefix(FieldUserName, v))
}

// UserNameHasSuffix applies the HasSuffix predicate on the "user_name" field.
func UserNameHasSuffix(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldHasSuffix(FieldUserName, v))
}

// UserNameEqualFold applies the EqualFold predicate on the "user_name" field.
func UserNameEqualFold(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldEqualFold(FieldUserName, v))
}

// UserNameContainsFold applies the ContainsFold predicate on the "user_name" field.
func UserNameContainsFold(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldContainsFold(FieldUserName, v))
}

// PswdEQ applies the EQ predicate on the "pswd" field.
func PswdEQ(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldEQ(FieldPswd, v))
}

// PswdNEQ applies the NEQ predicate on the "pswd" field.
func PswdNEQ(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldNEQ(FieldPswd, v))
}

// PswdIn applies the In predicate on the "pswd" field.
func PswdIn(vs ...string) predicate.UserModel {
	return predicate.UserModel(sql.FieldIn(FieldPswd, vs...))
}

// PswdNotIn applies the NotIn predicate on the "pswd" field.
func PswdNotIn(vs ...string) predicate.UserModel {
	return predicate.UserModel(sql.FieldNotIn(FieldPswd, vs...))
}

// PswdGT applies the GT predicate on the "pswd" field.
func PswdGT(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldGT(FieldPswd, v))
}

// PswdGTE applies the GTE predicate on the "pswd" field.
func PswdGTE(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldGTE(FieldPswd, v))
}

// PswdLT applies the LT predicate on the "pswd" field.
func PswdLT(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldLT(FieldPswd, v))
}

// PswdLTE applies the LTE predicate on the "pswd" field.
func PswdLTE(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldLTE(FieldPswd, v))
}

// PswdContains applies the Contains predicate on the "pswd" field.
func PswdContains(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldContains(FieldPswd, v))
}

// PswdHasPrefix applies the HasPrefix predicate on the "pswd" field.
func PswdHasPrefix(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldHasPrefix(FieldPswd, v))
}

// PswdHasSuffix applies the HasSuffix predicate on the "pswd" field.
func PswdHasSuffix(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldHasSuffix(FieldPswd, v))
}

// PswdEqualFold applies the EqualFold predicate on the "pswd" field.
func PswdEqualFold(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldEqualFold(FieldPswd, v))
}

// PswdContainsFold applies the ContainsFold predicate on the "pswd" field.
func PswdContainsFold(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldContainsFold(FieldPswd, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v uuid.UUID) predicate.UserModel {
	return predicate.UserModel(sql.FieldLTE(FieldTenantID, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...string) predicate.UserModel {
	return predicate.UserModel(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...string) predicate.UserModel {
	return predicate.UserModel(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldLTE(FieldRole, v))
}

// RoleContains applies the Contains predicate on the "role" field.
func RoleContains(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldContains(FieldRole, v))
}

// RoleHasPrefix applies the HasPrefix predicate on the "role" field.
func RoleHasPrefix(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldHasPrefix(FieldRole, v))
}

// RoleHasSuffix applies the HasSuffix predicate on the "role" field.
func RoleHasSuffix(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldHasSuffix(FieldRole, v))
}

// RoleEqualFold applies the EqualFold predicate on the "role" field.
func RoleEqualFold(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldEqualFold(FieldRole, v))
}

// RoleContainsFold applies the ContainsFold predicate on the "role" field.
func RoleContainsFold(v string) predicate.UserModel {
	return predicate.UserModel(sql.FieldContainsFold(FieldRole, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserModel) predicate.UserModel {
	return predicate.UserModel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserModel) predicate.UserModel {
	return predicate.UserModel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserModel) predicate.UserModel {
	return predicate.UserModel(func(s *sql.Selector) {
		p(s.Not())
	})
}
