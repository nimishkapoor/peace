// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kapt/kapt/gql/ent/predicate"
	"kapt/kapt/gql/ent/tenantmodel"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantModelUpdate is the builder for updating TenantModel entities.
type TenantModelUpdate struct {
	config
	hooks    []Hook
	mutation *TenantModelMutation
}

// Where appends a list predicates to the TenantModelUpdate builder.
func (tmu *TenantModelUpdate) Where(ps ...predicate.TenantModel) *TenantModelUpdate {
	tmu.mutation.Where(ps...)
	return tmu
}

// SetTenantName sets the "tenant_name" field.
func (tmu *TenantModelUpdate) SetTenantName(s string) *TenantModelUpdate {
	tmu.mutation.SetTenantName(s)
	return tmu
}

// SetStatus sets the "status" field.
func (tmu *TenantModelUpdate) SetStatus(i int) *TenantModelUpdate {
	tmu.mutation.ResetStatus()
	tmu.mutation.SetStatus(i)
	return tmu
}

// AddStatus adds i to the "status" field.
func (tmu *TenantModelUpdate) AddStatus(i int) *TenantModelUpdate {
	tmu.mutation.AddStatus(i)
	return tmu
}

// Mutation returns the TenantModelMutation object of the builder.
func (tmu *TenantModelUpdate) Mutation() *TenantModelMutation {
	return tmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tmu *TenantModelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tmu.sqlSave, tmu.mutation, tmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmu *TenantModelUpdate) SaveX(ctx context.Context) int {
	affected, err := tmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmu *TenantModelUpdate) Exec(ctx context.Context) error {
	_, err := tmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmu *TenantModelUpdate) ExecX(ctx context.Context) {
	if err := tmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tmu *TenantModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tenantmodel.Table, tenantmodel.Columns, sqlgraph.NewFieldSpec(tenantmodel.FieldID, field.TypeUUID))
	if ps := tmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmu.mutation.TenantName(); ok {
		_spec.SetField(tenantmodel.FieldTenantName, field.TypeString, value)
	}
	if value, ok := tmu.mutation.Status(); ok {
		_spec.SetField(tenantmodel.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tmu.mutation.AddedStatus(); ok {
		_spec.AddField(tenantmodel.FieldStatus, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantmodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tmu.mutation.done = true
	return n, nil
}

// TenantModelUpdateOne is the builder for updating a single TenantModel entity.
type TenantModelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantModelMutation
}

// SetTenantName sets the "tenant_name" field.
func (tmuo *TenantModelUpdateOne) SetTenantName(s string) *TenantModelUpdateOne {
	tmuo.mutation.SetTenantName(s)
	return tmuo
}

// SetStatus sets the "status" field.
func (tmuo *TenantModelUpdateOne) SetStatus(i int) *TenantModelUpdateOne {
	tmuo.mutation.ResetStatus()
	tmuo.mutation.SetStatus(i)
	return tmuo
}

// AddStatus adds i to the "status" field.
func (tmuo *TenantModelUpdateOne) AddStatus(i int) *TenantModelUpdateOne {
	tmuo.mutation.AddStatus(i)
	return tmuo
}

// Mutation returns the TenantModelMutation object of the builder.
func (tmuo *TenantModelUpdateOne) Mutation() *TenantModelMutation {
	return tmuo.mutation
}

// Where appends a list predicates to the TenantModelUpdate builder.
func (tmuo *TenantModelUpdateOne) Where(ps ...predicate.TenantModel) *TenantModelUpdateOne {
	tmuo.mutation.Where(ps...)
	return tmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tmuo *TenantModelUpdateOne) Select(field string, fields ...string) *TenantModelUpdateOne {
	tmuo.fields = append([]string{field}, fields...)
	return tmuo
}

// Save executes the query and returns the updated TenantModel entity.
func (tmuo *TenantModelUpdateOne) Save(ctx context.Context) (*TenantModel, error) {
	return withHooks(ctx, tmuo.sqlSave, tmuo.mutation, tmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmuo *TenantModelUpdateOne) SaveX(ctx context.Context) *TenantModel {
	node, err := tmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tmuo *TenantModelUpdateOne) Exec(ctx context.Context) error {
	_, err := tmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmuo *TenantModelUpdateOne) ExecX(ctx context.Context) {
	if err := tmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tmuo *TenantModelUpdateOne) sqlSave(ctx context.Context) (_node *TenantModel, err error) {
	_spec := sqlgraph.NewUpdateSpec(tenantmodel.Table, tenantmodel.Columns, sqlgraph.NewFieldSpec(tenantmodel.FieldID, field.TypeUUID))
	id, ok := tmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TenantModel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenantmodel.FieldID)
		for _, f := range fields {
			if !tenantmodel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenantmodel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmuo.mutation.TenantName(); ok {
		_spec.SetField(tenantmodel.FieldTenantName, field.TypeString, value)
	}
	if value, ok := tmuo.mutation.Status(); ok {
		_spec.SetField(tenantmodel.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tmuo.mutation.AddedStatus(); ok {
		_spec.AddField(tenantmodel.FieldStatus, field.TypeInt, value)
	}
	_node = &TenantModel{config: tmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantmodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tmuo.mutation.done = true
	return _node, nil
}
